# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

---
- hosts: all
  gather_facts: no
  become: yes
  vars:
    project_base_directory: '/var/www/{{ cli__site_domain }}'
    project_release_base_directory: '{{ project_base_directory }}/releases/{{ __release_metadata.release_id }}'

  tasks:
    - name: 'Check release archive for "public" folder'
      command:
        cmd: 'tar -tvf {{ cli__release_artifact_folder }}/release.tgz "./public/"'
        warn: false
      changed_when: false
      delegate_to: 'localhost'
      run_once: true

    - name: Get applicable hosts for release
      meta: end_host
      when: webserver__vhosts[cli__site_domain] is not defined

    - name: 'Load variables from release artifact metadata'
      include_vars:
        file: '{{ cli__release_artifact_folder }}/release.yml'
        name: __release_metadata

    - name: Gather Facts
      setup:

    - name: Ensure project release folder exists
      file:
        path: '{{ project_release_base_directory }}'
        state: directory
        owner: '{{ administrator_username }}'
        group: www-data
        mode: '0750'

    - name: Ensure project release archive has been extracted
      unarchive:
        src: '{{ cli__release_artifact_folder }}/release.tgz'
        dest: '{{ project_release_base_directory }}'
      become: no

    - name: 'Check for and install PHP dependencies'
      block:
        - name: 'Get status of "composer.json" in release'
          stat:
            path: '{{ project_release_base_directory }}/composer.json'
          register: __composer_json_status

        - name: 'Install PHP dependencies with Composer'
          composer:
            classmap_authoritative: true
            command: 'install'
            working_dir: '{{ project_release_base_directory }}'
          become: false
          changed_when: true
          when: __composer_json_status.stat.exists

    - name: Ensure owners and permissions for files in project release folder are correct
      command: '{{ item }}'
      args:
        chdir: '{{ project_release_base_directory }}'
      changed_when: true
      loop:
        - "find . -wholename './composer.*' -exec chown '{{ administrator_username }}:root' {} \\;"
        - "find . -wholename './private*' -exec chown '{{ administrator_username }}:root' {} \\;"
        - "find . -wholename './protected*' -exec chown '{{ administrator_username }}:www-data' {} \\;"
        - "find . -wholename './public*' -exec chown '{{ administrator_username }}:www-data' {} \\;"
        - 'find . -type d -exec chmod 0750 {} \;'
        - 'find . -type f -exec chmod 0640 {} \;'
        - "find . -type f -wholename './private/bin/*' -exec chmod 0750 {} \\;"
        - "find . -type f -wholename './private/cron/*' -exec chmod 0750 {} \\;"

    - name: Ensure project release Apache configuration file exists
      copy:
        content: |
          Define DEPLOYED_RELEASE {{ __release_metadata.release_id| quote }}

          SetEnv DEPLOYED_RELEASE {{ __release_metadata.release_id | quote }}
          SetEnv DEPLOYED_RELEASE_GIT_HASH {{ __release_metadata.release_git_sha | quote }}

          {% if webserver__vhosts[cli__site_domain].env_vars is defined %}
            {% for i in webserver__vhosts[cli__site_domain].env_vars | dict2items %}
              SetEnv {{ i.key }} {{ i.value | string | quote }}
            {% endfor %}
          {% endif %}
        dest: '{{ project_base_directory }}/current_release.apache2.conf'
        owner: '{{ administrator_username }}'
        group: root
        mode: '0640'

    - name: Ensure project release environment variables file exists
      copy:
        content: |
          export DEPLOYED_RELEASE={{ __release_metadata.release_id | quote }}
          export DEPLOYED_RELEASE_GIT_HASH={{ __release_metadata.release_git_sha | quote }}
          export SHARED_ROOT={{ project_base_directory ~ '/shared' | quote }}
          {% if webserver__vhosts[cli__site_domain].env_vars is defined %}
            {% for i in webserver__vhosts[cli__site_domain].env_vars | dict2items %}
              export {{ i.key }}={{ i.value | string | quote }}
            {% endfor %}
          {% endif %}
        dest: '{{ project_base_directory }}/current_release.sh'
        owner: '{{ administrator_username }}'
        group: root
        mode: '0640'

    - name: Ensure Sentry is aware of project release and deployment
      block:
      - name: Ensure Sentry is aware of project release and deployment
        uri:
          url: 'https://sentry.io/api/0/organizations/{{ sentry_organisation }}/releases/'
          method: POST
          body_format: json
          headers:
            Authorization: 'Bearer {{ sentry_auth_token }}'
          body: |
            {
              "projects": ["{{ webserver__vhosts[cli__site_domain].sentry_project }}"],
              "refs": [
                {
                  "commit": "{{ __release_metadata.release_git_sha }}",
                  "repository": "{{ webserver__vhosts[cli__site_domain].github_project }}"
                }
              ],
              "version": "{{ __release_metadata.release_id }}"
            }
          status_code: 201

      - name: Ensure Sentry is aware of project release deployment
        uri:
          url: 'https://sentry.io/api/0/organizations/{{ sentry_organisation }}/releases/{{ __release_metadata.release_id }}/deploys/'
          method: POST
          body_format: json
          headers:
            Authorization: 'Bearer {{ sentry_auth_token }}'
          body: |
            {
              "environment": "{{ webserver__vhosts[cli__site_domain].env_vars.APP_ENV  }}",
            }
          status_code: 201
      when: webserver__vhosts[cli__site_domain].sentry_project is defined
      run_once: true
      delegate_to: localhost

    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Reload PHP-FPM
      service:
        name: php7.4-fpm
        state: reloaded

    - name: Ensure only current and previous project release folders exist
      shell: 'set -eo pipefail; ls -1tr {{ project_base_directory }}/releases | head -n -2 | xargs rm -rf'
      args:
        chdir: '{{ project_base_directory }}/releases'
        executable: /bin/bash
      changed_when: true

    - name: 'Perform smoke tests'
      tags:
        - 'smoketest'
      block:
        - name: 'Check release deployments'
          uri:
            headers:
              Host: '{{ cli__site_domain }}'
            url: 'https://localhost/'
            url_password: '{{ webserver__vhosts[cli__site_domain].auth.password | default("") }}'
            url_username: '{{ webserver__vhosts[cli__site_domain].auth.username | default("") }}'
            validate_certs: false
          register: __smoketest_response
          failed_when: >
            (__smoketest_response.x_release is not defined) or
            (__release_metadata.release_id | string not in __smoketest_response.x_release)
      rescue:
        # This pretty-prints any errors from the block above.
        - debug:
            var: __smoketest_response
