---
- name: Ensure webserver-related packages are installed
  apt:
    force_apt_get: yes
    name:
      - apache2
      # Kirby 3 uses the ImageMagick command-line tools instead of the
      # native Imagick PHP extension.
      - imagemagick
      - goaccess
      # "php-fpm" is required for HTTP/2 support.
      - php7.2-fpm
      # Kirby 3 requires the following PHP extensions.
      - php-curl
      - php-gd
      - php-mbstring
    state: present

- name: Ensure required Apache modules are enabled
  apache2_module:
    name: "{{ item }}"
    state: present
  loop:
    - cgid
    - expires
    - headers
    - http2
    - macro
    - mpm_event
    - proxy_fcgi
    - rewrite
    - setenvif
    - ssl
  notify: Reload Apache

- name: Ensure legacy and unnecessary Apache modules are disabled
  apache2_module:
    name: "{{ item }}"
    state: absent
  loop:
    - dav
    - include
    - mpm_prefork
    - status
  notify: Reload Apache

- name: Ensure custom Apache configuration file exists
  template:
    src: apache2.conf.j2
    dest: /etc/apache2/conf-available/zzz.conf
    owner: root
    group: root
    mode: '0600'
  notify: Reload Apache

- name: Ensure custom Apache configuration file is active
  command: a2enconf zzz
  args:
    creates: /etc/apache2/conf-enabled/zzz.conf
  notify:
    - Reload Apache

- name: 'Ensure the "php7.2-fpm.conf" Apache configuration file is active'
  command: a2enconf php7.2-fpm
  args:
    creates: /etc/apache2/conf-enabled/php7.2-fpm.conf
  notify:
    - Reload Apache
    - Reload php-fpm

- name: Ensure PHP allows uploads of sizes up to 20MB
  lineinfile:
    dest: /etc/php/7.2/fpm/php.ini
    regexp: '^{{ item }}'
    line: '{{ item }} = 20M'
    state: present
  loop:
    - post_max_size
    - upload_max_filesize
  notify: Reload php-fpm

- name: Ensure Apache virtual hosts base folder structures exist
  file:
    group: '{{ item.1.group }}'
    mode: '{{ item.1.mode }}'
    owner: '{{ administrator_username }}'
    path: '/var/www/{{ item.0 }}/{{ item.1.directory }}'
    state: directory
  loop: '{{ sites | product(virtual_host_base_folder_structure) | list }}'

- name: Ensure Apache virtual hosts configuration files exist
  template:
    src: virtualhost.conf.j2
    dest: '/etc/apache2/sites-available/{{ item.key }}.conf'
    owner: root
    group: root
    mode: '0600'
  loop: '{{ sites | dict2items }}'
  loop_control:
    label: '{{ item.key }}'

- name: 'Ensure ".htpasswd" files exist for password-protected Apache virtual hosts'
  htpasswd:
    group: 'www-data'
    mode: '0640'
    owner: 'root'
    path: '/var/www/{{ item.key }}/shared/protected/.htpasswd'
    name: '{{ item.value.auth.username }}'
    password: '{{ item.value.auth.password }}'
  when: item.value.auth.password is defined and item.value.auth.username is defined
  loop: "{{ sites | dict2items }}"
  loop_control:
    label: '{{ item.key }}'

- name: Ensure Apache virtual hosts scheduled tasks scripts exist
  template:
    src: www-cron.sh.j2
    dest: '/etc/cron.{{ item }}/www-cron'
    owner: root
    group: root
    mode: '0755'
  loop:
    - hourly
    - daily
    - weekly
    - monthly

- name: Ensure Apache virtual host Kirby-related folders exist
  file:
    group: 'www-data'
    mode: "2750"
    owner: 'www-data'
    path: "/var/www/{{ item.0.key }}/{{ item.1 }}"
    state: directory
  with_nested:
    - "{{ lookup('dict', sites) }}"
    - [ "shared/protected/accounts", "shared/protected/content", "shared/protected/sessions" ]
  when: item[0].value.kirby_key is defined

- name: Get Composer status
  stat:
    path: /usr/local/bin/composer
  register: composer_bin

- name: Ensure Composer is installed
  block:
    - name: Get Composer installer signature
      uri:
        url: https://composer.github.io/installer.sig
        return_content: true
      register: composer_installer_signature

    - name: Ensure Composer installer script exists
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-installer.php
        mode: 0755
        checksum: "sha384:{{ composer_installer_signature.content }}"

    - name: Ensure Composer is installed
      command: php composer-installer.php --install-dir=/usr/local/bin --filename=composer
      args:
        chdir: /tmp

    - name: Ensure Composer installer script no longer exists
      file:
        path: /tmp/composer-installer.php
        state: absent
  when: not composer_bin.stat.exists

- name: Ensure the Composer executable has the correct owners and permissions
  file:
    group: root
    mode: "0755"
    owner: root
    path: /usr/local/bin/composer

- name: Ensure Composer plays nicely with GitHub
  command: "composer config -g github-oauth.github.com {{ composer_github_token }}"
  changed_when: false
  become: yes
  become_user: "{{ administrator_username }}"

# We force any notified handlers to run in case there are any changes
# that need to be applied before other roles that have this role as a
# dependency are executed.
- name: Force all currently notified handlers to run
  meta: flush_handlers
