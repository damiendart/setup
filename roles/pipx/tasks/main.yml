# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

---
# Updating the non-system Python installation to a new major or minor
# version can break tools expecting the previous version. Rather than
# futz around with fixing things in-place, it's easier to just blitz and
# reinstall. This also gives us the opportunity to reign in any
# configuration drift.

- name: 'Determine whether a new version of Python has been installed in this play'
  ansible.builtin.set_fact:
    __has_updated_python: >
      {{
        ansible_local.pipx is not defined
        or ansible_local.python.version != ansible_local.pipx.python_version
      }}

- name: "Ensure \"pipx\" is installed using \"pip{{ ansible_local.python.version.split('.')[0:2] | join('.') }}\""
  ansible.builtin.pip:
    executable: "{{ ansible_local.python.bin_dir }}/pip{{ ansible_local.python.version.split('.')[0:2] | join('.') }}"
    extra_args: '--user'
    name: 'pipx'
    state: "{{ __has_updated_python | ternary('forcereinstall', 'present') }}"
  become: true
  become_user: '{{ pipx__user }}'

- name: 'Ensure existing user-wide applications installed with "pipx" are uninstalled'
  ansible.builtin.command: '/home/{{ pipx__user }}/.local/bin/pipx uninstall-all'
  become: true
  become_user: '{{ pipx__user }}'
  changed_when: true
  when: __has_updated_python

- name: 'Ensure user-wide applications to be installed with "pipx" are installed'
  ansible.builtin.command: '/home/{{ pipx__user }}/.local/bin/pipx install {{ item }}'
  become: true
  become_user: '{{ pipx__user }}'
  register: __pipx_install
  changed_when: __pipx_install.stdout is search('installed package')
  loop: '{{ pipx__pipx_packages }}'

- name: 'Ensure user-wide Python applications installed with "pipx" are up-to-date'
  ansible.builtin.command: "/home/{{ pipx__user }}/.local/bin/pipx upgrade {{ item | split('[') | first }}"
  become: true
  become_user: '{{ pipx__user }}'
  register: __pipx_upgrade
  changed_when: __pipx_upgrade.stdout is search('upgraded package')
  loop: '{{ pipx__pipx_packages }}'

- name: 'Ensure Ansible local facts directory exists'
  ansible.builtin.file:
    mode: 0755
    path: '/etc/ansible/facts.d'
    state: 'directory'

- name: 'Ensure role-related Ansible local facts exists'
  ansible.builtin.template:
    dest: '/etc/ansible/facts.d/pipx.fact'
    group: 'root'
    mode: 0644
    owner: 'root'
    src: 'pipx.fact.j2'
  register: __pipx_facts

- name: 'Ensure Ansible local facts are up-to-date'
  ansible.builtin.setup: # noqa: no-handler
    filter: 'ansible_local'
  when: __pipx_facts is changed
