# Performs a Capistrano-style website deployment.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

---
- name: 'Load variables from release artifact metadata YAML document'
  ansible.builtin.include_vars:
    file: '{{ deploy_website__release_artifact_folder }}/release.yml'
    name: __release_metadata

- name: 'Set virtual host base directory variable'
  tags:
    - 'deploy-website:setup'
  ansible.builtin.set_fact:
    __vhost_base_directory: '/var/www/{{ deploy_website__site_domain }}'

- name: 'Set release base directory variable'
  ansible.builtin.set_fact:
    __release_base_directory: '{{ __vhost_base_directory }}/releases/{{ __release_metadata.release_timestamp }}'

- name: 'Check for an existing in-progress deployment'
  block:
    - name: 'Get status of an existing deployment lock file'
      ansible.builtin.stat:
        path: '{{ __vhost_base_directory }}/deploy.lock'
      register: __deploy_lock_status

    - name: 'Stop current deployment if a deployment is already in progress'
      ansible.builtin.fail:
        msg: 'A deployment is already in progress (lock file: "{{ __vhost_base_directory }}/deploy.lock")'
      when: __deploy_lock_status.stat.exists

- name: 'Ensure a deployment lock file exists'
  ansible.builtin.file:
    group: '{{ deploy_website__administrator_username }}'
    mode: 0640
    owner: '{{ deploy_website__administrator_username }}'
    path: '{{ __vhost_base_directory }}/deploy.lock'
    state: 'touch'

- name: 'Include "preflight checks" tasks'
  ansible.builtin.include_tasks: 'preflight.yml'

- name: 'Include pre-deployment setup tasks'
  ansible.builtin.include_tasks: 'setup.yml'

- name: 'Create release base directory'
  ansible.builtin.file:
    group: 'www-data'
    mode: 0750
    owner: '{{ deploy_website__administrator_username }}'
    path: '{{ __release_base_directory }}'
    state: 'directory'

- name: 'Unarchive release artifact archive into release base directory'
  ansible.builtin.unarchive:
    src: '{{ deploy_website__release_artifact_folder }}/release.tgz'
    dest: '{{ __release_base_directory }}'
  become: false

- name: 'Update owners and permissions of release directory contents'
  ansible.builtin.command: '{{ item }}'
  args:
    chdir: '{{ __release_base_directory }}'
  changed_when: true
  loop:
    - "find . -exec chown '{{ deploy_website__administrator_username }}:www-data' {} \\;"
    - "find . -type f -maxdepth 1 -exec chown '{{ deploy_website__administrator_username }}:root' {} \\;"
    - "find . -wholename './private*' -exec chown '{{ deploy_website__administrator_username }}:root' {} \\;"
    - 'find . -type d -exec chmod 0750 {} \;'
    - 'find . -type f -exec chmod 0640 {} \;'
    - "find . -type f -wholename './private/bin/*' -exec chmod 0750 {} \\;"

- name: 'Add web-server-writable directories to release directory'
  ansible.builtin.file:
    path: '{{ __release_base_directory }}/{{ item }}'
    state: 'directory'
    owner: 'www-data'
    group: 'www-data'
    mode: '2750'
  loop: '{{ __release_metadata.writable_directories_release }}'
  when: __release_metadata.writable_directories_release is defined

- name: 'Ensure web-server-writable directories exist in shared directory'
  ansible.builtin.file:
    path: '{{ __vhost_base_directory }}/shared/{{ item }}'
    state: 'directory'
    owner: 'www-data'
    group: 'www-data'
    mode: '2750'
  loop: '{{ __release_metadata.writable_directories_shared }}'
  when: __release_metadata.writable_directories_shared is defined

- name: 'Check for and run project-specific pre-installation tasks'
  block:
    - name: 'Get status of project-specific pre-installation tasks file'
      ansible.builtin.stat:
        path: '{{ deploy_website__release_artifact_folder }}/pre-install-tasks.yml'
      changed_when: false
      delegate_to: 'localhost'
      register: __pre_install_tasks_file

    - name: 'Include project-specific pre-installation tasks file (if applicable)'
      ansible.builtin.include_tasks:
        file: '{{ deploy_website__release_artifact_folder }}/pre-install-tasks.yml'
      when: __pre_install_tasks_file.stat.exists

- name: 'Update environment Apache configuration file'
  ansible.builtin.template:
    dest: '{{ __vhost_base_directory }}/deployment.apache2.conf'
    group: 'root'
    mode: 0640
    owner: '{{ deploy_website__administrator_username }}'
    src: 'deployment.apache2.conf.j2'
  notify:
    - 'Reload Apache'
    - 'Reload PHP-FPM'

- name: 'Update environment Bash shell configuration file'
  ansible.builtin.template:
    # Override Jinja control structure syntax so that it doesn't
    # cause issues with ShellCheck.
    block_end_string: '%#'
    block_start_string: '#%'
    dest: '{{ __vhost_base_directory }}/deployment.conf.sh'
    group: 'root'
    owner: '{{ deploy_website__administrator_username }}'
    mode: 0640
    src: 'deployment.conf.sh.j2'

- name: 'Run any post-installation tasks'
  block:
    - name: 'Get status of post-installation tasks file'
      ansible.builtin.stat:
        path: '{{ deploy_website__release_artifact_folder }}/post-install-tasks.yml'
      changed_when: false
      delegate_to: 'localhost'
      register: __post_install_tasks_file

    - name: 'Include post-installation tasks file (if applicable)'
      ansible.builtin.include_tasks:
        file: '{{ deploy_website__release_artifact_folder }}/post-install-tasks.yml'
      when: __post_install_tasks_file.stat.exists

- name: 'Make Sentry aware of deployment'
  tags:
    - 'sentry'
  when: deploy_website__vhosts[deploy_website__site_domain].sentry_project is defined
  delegate_to: 'localhost'
  run_once: true
  block:
    - name: 'Make Sentry aware of release'
      ansible.builtin.uri:
        body: |
          {
            "projects": ["{{ deploy_website__vhosts[deploy_website__site_domain].sentry_project }}"],
            "refs": [
              {
                "commit": "{{ __release_metadata.release_git_sha }}",
                "repository": "{{ __release_metadata.github_project }}"
              }
            ],
            "version": "{{ __release_metadata.release_timestamp }}"
          }
        body_format: 'json'
        headers:
          Authorization: 'Bearer {{ deploy_website__sentry_auth_token }}'
        method: 'POST'
        status_code: 201
        url: 'https://sentry.io/api/0/organizations/{{ deploy_website__sentry_organisation }}/releases/'
      changed_when: true

    - name: 'Make Sentry aware of deployment'
      ansible.builtin.uri:
        body: |
          {
            "environment": "{{ deploy_website__vhosts[deploy_website__site_domain].env_vars.APP_ENV }}"
          }
        body_format: 'json'
        headers:
          Authorization: 'Bearer {{ deploy_website__sentry_auth_token }}'
        method: 'POST'
        status_code: 201
        url: 'https://sentry.io/api/0/organizations/{{ deploy_website__sentry_organisation }}/releases/{{ __release_metadata.release_timestamp }}/deploys/'
      changed_when: true

- name: 'Force all currently notified handlers to run'
  ansible.builtin.meta: 'flush_handlers'

- name: 'Perform smoke tests'
  tags:
    - 'smoketest'
  block:
    - name: 'Check release is live'
      ansible.builtin.uri:
        http_agent: 'deploy-website-smoke-test'
        url: 'https://{{ deploy_website__site_domain }}/'
        url_password: '{{ deploy_website__vhosts[deploy_website__site_domain].auth.password | default("") }}'
        url_username: '{{ deploy_website__vhosts[deploy_website__site_domain].auth.username | default("") }}'
        validate_certs: false
      register: __smoketest_response
      failed_when: >
        (__smoketest_response.x_release_timestamp is not defined) or
        (__release_metadata.release_timestamp | string not in __smoketest_response.x_release_timestamp)
      delegate_to: 'localhost'
      run_once: true
      no_log: true

    - name: 'Check release is running on host' # noqa: command-instead-of-module
      ansible.builtin.command:
        # The "--resolve" option allows "/etc/hosts"-type functionality
        # without having to edit system-wide configuration files.
        # Ansible's 'uri' module has no similar functionality.
        cmd: >
          curl -sS
          --fail
          --insecure
          --resolve '{{ deploy_website__site_domain }}:443:127.0.0.1'
          --user-agent 'deploy-website-smoke-test'
          '{{ item }}'
      register: __smoketest_response
      changed_when: false
      loop: "{{ ['https://{{ deploy_website__site_domain }}'] + deploy_website__vhosts[deploy_website__site_domain].additional_smoketest_urls | default([]) }}"
  rescue:
    - name: 'Pretty-print any smoke-test-related errors'
      ansible.builtin.debug:
        var: __smoketest_response

- name: 'Clean up virtual host releases folder'
  ansible.builtin.shell: 'set -eo pipefail; ls -1tr {{ __vhost_base_directory }}/releases | head -n -2 | xargs rm -rf'
  args:
    chdir: '{{ __vhost_base_directory }}/releases'
    executable: '/bin/bash'
  changed_when: true

- name: 'Ensure the deployment lock file is removed'
  ansible.builtin.file:
    path: '{{ __vhost_base_directory }}/deploy.lock'
    state: 'absent'
