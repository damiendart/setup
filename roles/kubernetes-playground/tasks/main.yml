# This role installs Kubernetes-related bits and pieces.
#
# This role is a result of futzing around with setting up a single
# Kubernetes cluster within a single system for learning purposes, so
# adjust your expectations accordingly.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

---
- name: "Ensure Google Cloud's package signing key is present for APT"
  apt_key:
    state: 'present'
    url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'

- name: 'Ensure the Kubernetes repository is present in APT sources list'
  apt_repository:
    # The repository is as per the installation guide at
    # <https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-using-native-package-management>.
    repo: 'deb https://apt.kubernetes.io/ kubernetes-xenial main'
    state: 'present'

- name: 'Ensure kubeadm, kubectl and kubelet are installed'
  apt:
    force_apt_get: true
    name:
      - 'kubeadm'
      - 'kubectl'
      - 'kubelet'
    state: 'present'

# Kubelets requires system swap to be disabled. For more information,
# along with some notes on running Kubernetes with system swap, please
# see <https://github.com/kubernetes/kubernetes/issues/53533>.
- name: 'Ensure system swap is disabled'
  block:
  - name: 'Ensure system swap is disabled'
    command: 'swapoff -av'
    register: __swapoff
    changed_when: __swapoff.stdout | regex_search('swapoff')

  - name: 'Ensure disabled system swap persists after system reboot'
    lineinfile:
      backrefs: true
      dest: '/etc/fstab'
      line: '# \1'
      regexp: '(?i)^([^#][\S]+\s+(none|swap)\s+swap.*)'
      state: 'present'

  - name: 'Ensure swappiness is set to zero'
    sysctl:
      name: 'vm.swappiness'
      state: 'present'
      value: '0'

- name: 'Ensure kubelet is running and starts on system boot'
  service:
    enabled: true
    name: 'kubelet'
    state: 'started'

- name: 'Ensure the Kubernetes control-plane node is set up'
  command:
    cmd: >
      kubeadm init
      --pod-network-cidr=192.168.0.0/16
      --cri-socket "unix:///run/containerd/containerd.sock"
    creates: '/etc/kubernetes/admin.conf'
    warn: false

- name: 'Ensure ".kube" directory exists in administrator home directory'
  file:
    group: '{{ kubernetes__administrator_username }}'
    mode: 0700
    owner: '{{ kubernetes__administrator_username }}'
    path: '/home/{{ kubernetes__administrator_username }}/.kube'
    state: 'directory'

- name: 'Ensure K8s configuration file exists in administrator home directory'
  copy:
    dest: '/home/{{ kubernetes__administrator_username }}/.kube/config'
    group: '{{ kubernetes__administrator_username }}'
    owner: '{{ kubernetes__administrator_username }}'
    mode: 0600
    remote_src: true
    src: '/etc/kubernetes/admin.conf'

- name: 'Ensure pods can be scheduled on the control-plane node'
  block:
    - name: 'Get control-plane node status'
      command: 'kubectl describe node'
      register: __kubectl_describe_node
      changed_when: false

    - name: 'Ensure "NoSchedule" taint is not applied to control-plane node'
      command: 'kubectl taint node {{ ansible_hostname }} node-role.kubernetes.io/master-'
      when: __kubectl_describe_node.stdout is search('node-role.kubernetes.io/master:NoSchedule')
  become: true
  become_user: '{{ kubernetes__administrator_username }}'

- name: 'Ensure Calico is installed'
  command: 'kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml'
  register: __kubectl_apply_calico
  become: true
  become_user: '{{ kubernetes__administrator_username }}'
  changed_when: __kubectl_apply_calico is search(' created')
