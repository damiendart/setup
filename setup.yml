---
# Damien Dart's Ansible Playbook
#
# This playbook is used to provision the server I host some simple
# websites on and my development environments.
#
#   - This playbook has been tested on Ubuntu 18.04.
#   - For Ubuntu 18.04 machines, Ansible needs to be told to use Python
#     3 (by setting "ansible_python_interpreter").
#   - Things to do on each machine after running this playbook:
#     - If using Tarsnap, ensure a valid (and ideally a write-only) key
#       file is present at "/root/tarsnap.key".
#     - In each virtual site directory, ensure there are symlinks to
#       valid "fullchain.pem" and "privkey.pem" files. For more
#       information, see the accompanying
#       "templates/apache2/virtualhost.conf.j2" file.
#   - This playbook works with the Mitogen plugin. For more information,
#     see <https://mitogen.readthedocs.io/en/stable/ansible.html>.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.


- hosts: all
  become: yes
  vars_files:
    - secret/vars.yml
  tasks:
    - name: Ensure timezone is set correctly
      timezone:
          name: Europe/London

    - name: Ensure a non-root user exists
      user:
        append: yes
        name: "{{ lookup('env', 'USER') }}"
        # The "password_hash" filter doesn't require passlib.
        password: "{{ lookup('password', 'secret/credentials-' + inventory_hostname + '.txt length=22') | password_hash('sha512')}}"
        update_password: on_create
        groups:
          - sudo

    - name: Ensure SSH keys for non-root user exist
      authorized_key:
        user: "{{ lookup('env', 'USER') }}"
        key: "https://github.com/{{ github_username }}.keys"

    - name: Ensure SSH doesn't allow passwords or root access
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^{{ item }}"
        line: "{{ item }} no"
        state: present
      with_items:
        - PasswordAuthentication
        - PermitRootLogin
      notify: Restart sshd

    - name: Ensure the Tarsnap deb packaging key is present
      apt_key:
        url: https://pkg.tarsnap.com/tarsnap-deb-packaging-key.asc
        state: present

    - name: Ensure required external repositories are present
      apt_repository:
        repo: "{{ item.repo }}"
        state: present
        filename: "{{ item.filename }}"
      with_items:
        - repo: "deb http://pkg.tarsnap.com/deb/{{ ansible_distribution_release }} ./"
          filename: tarsnap
        - repo: "ppa:certbot/certbot"
          filename: certbot

    - name: Ensure currently installed packages have been upgraded
      apt:
        update_cache: yes
        cache_valid_time: 3600
        upgrade: yes

    - name: Ensure required packages are installed
      apt:
        name:
          - apache2
          - fail2ban
          # Kirby uses the ImageMagick command-line tools instead of the
          # native PHP extension Imagick.
          - imagemagick
          - goaccess
          - logrotate
          - logwatch
          - monit
          # TODO: Explain what msmtp-mta is?
          - msmtp-mta
            # "php-fpm" is required for HTTP/2 support.
          - php-fpm
            # Kirby-powered websites require the following package.
          - php-mbstring
          - python-certbot-apache
          - tarsnap
          # As of Debian 9 (and Ubuntu 16.04), everything required for
          # unattended upgrades is installed by default.
          # - unattended-upgrades
        state: present

    - name: Ensure Canonical Livepatch is installed
      command: snap install canonical-livepatch

    - name: Get Canonical Livepatch status
      command: canonical-livepatch status
      register: livepatch_status
      ignore_errors: yes

    - name: "PROD: Ensure Canonical Livepatch is enabled"
      command: "canonical-livepatch enable {{ livepatch_key }}"
      when:
        - development is not defined or development == false
        - livepatch_status.stdout is search("Machine is not enabled.")

    - name: "DEV: Ensure development-related packages are installed"
      apt:
        name:
          - python-pip
          - python3-pip
          - ruby
          - ruby-dev
          - nodejs
          - npm
          - build-essential
        state: present
      when: development is defined and development

    - name: Ensure required Apache modules are enabled
      apache2_module:
        state: present
        name: "{{ item }}"
      with_items:
        - cgid
        - expires
        - headers
        - http2
        - mpm_event
        - proxy_fcgi
        - rewrite
        - setenvif
        - ssl
      notify: Restart Apache

    - name: Ensure unrequired Apache mods are disabled
      apache2_module:
        state: absent
        name: "{{ item }}"
      with_items:
        - mpm_prefork
        - status
      notify: Restart Apache

    - name: Ensure custom configuration files exists
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode | default('0644') }}"
      notify: "{{ item.notify | default([]) }}"
      with_items:
        - src: fail2ban/jail.local.j2
          dest: /etc/fail2ban/jail.local
          notify: Restart Fail2ban
        - src: msmtp/msmtprc.j2
          dest: /etc/msmtprc
        - src: logwatch/logwatch.conf.j2
          dest: /etc/logwatch/conf/logwatch.conf
        - src: monit/monitrc.j2
          # The weird name is so this configuration file is loaded last.
          dest: /etc/monit/conf.d/zzz.conf
          notify: Restart Monit
        - src: apache2/apache2.conf.j2
          # The weird name is so this configuration file is loaded last.
          dest: /etc/apache2/conf-available/zzz.conf
          notify: Restart Apache
        - src: cron/tarsnap.sh.j2
          dest: /etc/cron.daily/tarsnap
          mode: "0755"
        - src: cron/www-permissions.sh.j2
          dest: /etc/cron.hourly/zzz-permissions
          mode: "0755"
        - src: bin/webstats.sh.j2
          dest: /usr/local/bin/webstats
          mode: "0755"
        - src: bash/webstats_bash_completion.sh.j2
          dest: /etc/bash_completion.d/webstats

    - name: "DEV: Ensure development configuration files exists"
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: "{{ item.mode | default('0644') }}"
      with_items:
        - src: bash/bash_profile.sh.j2
          dest: /etc/profile.d/bash_profile.sh
      when: development is defined and development

    - name: Ensure the zzz.conf configuration file is active
      command: a2enconf zzz
      args:
        creates: /etc/apache2/conf-enabled/zzz.conf
      notify:
        - Restart Apache

    - name: Ensure the php*-fpm configuration file is active
      command: a2enconf php*-fpm
      args:
        creates: /etc/apache2/conf-enabled/php*-fpm.conf
      notify:
        - Restart Apache
        - Restart php-fpm

    - name: Ensure customised Certbot cron job is present
      replace:
        path: /etc/cron.d/certbot
        regexp: "certbot -q renew$"
        replace: "certbot -q renew --webroot --webroot-path /var/www/html --renew-hook 'service apache2 graceful'"

    - name: Ensure ufw is configured
      ufw:
        name: "{{ item.profile }}"
        rule: "{{ item.rule }}"
        state: enabled
      notify: Restart ufw
      with_items:
        - profile: Apache Full
          rule: allow
        - profile: OpenSSH
          rule: limit

    - name: Ensure site folders are present
      file:
        group: www-data
        mode: 0750
        owner: "{{ lookup('env', 'USER') }}"
        path: "/var/www/{{ item.key }}/public"
        state: directory
      with_dict: "{{ sites }}"

    - name: Ensure site-specific Apache configuration files exist
      template:
        src: apache2/virtualhost.conf.j2
        dest: "/etc/apache2/sites-available/{{ item.key }}.conf"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ sites }}"

    - name: Ensure site-specific cron helper scripts exist
      template:
        src: cron/www-cron.sh.j2
        dest: "/etc/cron.{{ item }}/www-cron"
        owner: root
        group: root
        mode: 0755
      with_items:
        - hourly
        - daily
        - weekly
        - monthly

    - name: Ensure Kirby core files are installed
      git:
        repo: "{{ item.repo }}"
        dest: "/usr/local/share/kirby/{{ item.name }}"
        version: 2.5.12
      with_items:
        - name: base
          repo: https://github.com/getkirby-v2/kirby.git
        - name: panel
          repo: https://github.com/getkirby-v2/panel.git

    - name: Ensure customised index.php exists for Kirby-powered sites.
      template:
        src: kirby/index.php.j2
        dest: "/var/www/{{ item.key }}/public/index.php"
        group: www-data
        mode: 0640
        owner: "{{ lookup('env', 'USER') }}"
      with_dict: "{{ sites }}"
      when: item.value.kirby_key is defined

    - name: Ensure Kirby panel folders are present for Kirby-powered sites.
      file:
        group: www-data
        mode: 0750
        owner: "{{ lookup('env', 'USER') }}"
        path: "/var/www/{{ item.key }}/public/panel"
        state: directory
      with_dict: "{{ sites }}"
      when: item.value.kirby_key is defined

    - name: Ensure customised panel/index.php exists for Kirby-powered sites.
      template:
        src: kirby/panel.php.j2
        dest: "/var/www/{{ item.key }}/public/panel/index.php"
        group: www-data
        mode: 0640
        owner: "{{ lookup('env', 'USER') }}"
      with_dict: "{{ sites }}"
      when: item.value.kirby_key is defined

    - name: Ensure PHP's maximum upload file size is increased
      lineinfile:
        dest: /etc/php/7.2/fpm/php.ini
        regexp: "^{{ item }}"
        line: "{{ item }} = 20M"
        state: present
      with_items:
        - post_max_size
        - upload_max_filesize
      notify: Restart php-fpm

  handlers:
    - name: Restart Apache
      service: name=apache2 state=restarted

    - name: Restart Fail2ban
      service: name=fail2ban state=restarted

    - name: Restart Monit
      service: name=monit state=restarted

    - name: Restart php-fpm
      # HACK: "service" doesn't like globs.
      command: service php*-fpm restart
      args:
        warn: false

    - name: Restart sshd
      service: name=ssh state=restarted

    - name: Restart ufw
      service: name=ufw state=restarted
