---
# Damien Dart's Ansible Playbook
#
#   - This playbook has been tested on Ubuntu 18.04.
#   - Ubuntu 18.04 comes with Python 3 preinstalled, so Ansible needs to
#     be told to use Python 3 on the Ansible-managed machines.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE file.
#
# TODO: Install Certbot.
# TODO: Configure Monit.


- hosts: all
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: Ensure timezone is set correctly
      timezone:
          name: Europe/London

    - name: Ensure a non-root user exists
      user:
        append: yes
        name: "{{ lookup('env', 'USER') }}"
        # The "password_hash" filter doesn't require passlib.
        password: "{{ lookup('password', 'credentials/' + inventory_hostname + '.txt length=22') | password_hash('sha512')}}"
        update_password: on_create
        groups:
          - sudo

    - name: Ensure SSH keys for non-root user exist
      authorized_key:
        user: "{{ lookup('env', 'USER') }}"
        key: "https://github.com/{{ GITHUB_USERNAME }}.keys"

    - name: Ensure SSH doesn't allow passwords or root access
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^{{ item }}"
        line: "{{ item }} no"
        state: present
      with_items:
        - PasswordAuthentication
        - PermitRootLogin
      notify: Restart sshd

    - name: Ensure currently installed packages have been upgraded
      apt:
        update_cache: yes
        cache_valid_time: 3600
        upgrade: yes

    - name: Ensure stuff is installed
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - apache2
        - fail2ban
        - logrotate
        - logwatch
        - monit
        # TODO: Explain what msmtp-mta is?
        - msmtp-mta
          # "php-fpm" is required for HTTP/2 support.
        - php-fpm
          # Kirby-powered websites require the following packages.
        - php-mbstring
        - php-imagick

    - name: Ensure the required Apache mods are enabled
      apache2_module:
        state: present
        name: "{{ item }}"
      with_items:
        - expires
        - headers
        - http2
        - mpm_event
        - proxy_fcgi
        - rewrite
        - setenvif
      notify: Restart Apache

    - name: Ensure unrequired Apache mods are disabled
      apache2_module:
        state: absent
        name: mpm_prefork

    - name: Ensure custom configuration files exists
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      notify: "{{ item.notify | default([]) }}"
      with_items:
        - src: jail.local.j2
          dest: /etc/fail2ban/jail.local
          notify: Restart Fail2ban
        - src: msmtprc.j2
          dest: /etc/msmtprc
        - src: logwatch.conf.j2
          dest: /etc/logwatch/conf/logwatch.conf
        - src: monitrc.j2
          # The weird name is so this configuration file is loaded last.
          dest: /etc/monit/conf.d/zzz.conf
        - src: apache.conf.j2
          # The weird name is so this configuration file is loaded last.
          dest: /etc/apache2/conf-available/zzz.conf
          notify: Restart Apache

    - name: Ensure the zzz.conf configuration file is active
      command: a2enconf zzz
      args:
        creates: /etc/apache2/conf-enabled/zzz.conf
      notify:
        - Restart Apache

    - name: Ensure the php*-fpm configuration file is active
      command: a2enconf php*-fpm
      args:
        creates: /etc/apache2/conf-enabled/php*-fpm.conf
      notify:
        - Restart Apache
        - Restart php-fpm

    - name: Ensure ufw is configured.
      ufw:
        name: "{{ item.profile }}"
        rule: "{{ item.rule }}"
        state: enabled
      notify: Restart ufw
      with_items:
        - profile: Apache Full
          rule: allow
        - profile: OpenSSH
          rule: limit

    - name: Ensure site folders are present
      file:
        group: www-data
        mode: 0750
        owner: "{{ lookup('env', 'USER') }}"
        path: "/var/www/{{ item.key }}/public"
        state: directory
      with_dict: "{{ sites }}"

    - name: Ensure site-specific Apache configuration files exist
      template:
        src: site-apache.conf.j2
        dest: "/etc/apache2/sites-available/{{ item.key }}.conf"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ sites }}"

  handlers:
    - name: Restart Apache
      service: name=apache2 state=restarted

    - name: Restart Fail2ban
      service: name=fail2ban state=restarted

    - name: Restart php-fpm
      # HACK: "service" doesn't like globs.
      command: service php*-fpm restart
      args:
        warn: false

    - name: Restart sshd
      service: name=ssh state=restarted

    - name: Restart ufw
      service: name=ufw state=restarted
